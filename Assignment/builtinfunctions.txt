String inbuilt functions

1. Length
   - Gets the length of the string (number of characters).
   csharp
   string str = "Hello";
   int length = str.Length;  // Output: 5
   

2.ToUpper()
   - Converts all characters in the string to uppercase.
   csharp
   string str = "hello";
   string upperStr = str.ToUpper();  // Output: "HELLO"
   

3.ToLower()
   - Converts all characters in the string to lowercase.
   csharp
   string str = "HELLO";
   string lowerStr = str.ToLower();  // Output: "hello"
   

4.Substring(int startIndex)
   - Extracts a substring starting at the specified index.
   csharp
   string str = "Hello, World!";
   string subStr = str.Substring(7);  // Output: "World!"
   
5.Substring(int startIndex, int length)
   - Extracts a substring starting at the specified index with a given length.
   csharp
   string str = "Hello, World!";
   string subStr = str.Substring(7, 5);  // Output: "World"
   

6.IndexOf(string value)
   - Returns the index of the first occurrence of a specified substring. If not found, it returns -1.
   csharp
   string str = "Hello, World!";
   int index = str.IndexOf("World");  // Output: 7
   

7.LastIndexOf(string value)
   - Returns the index of the last occurrence of a specified substring.
   csharp
   string str = "Hello, World! Hello!";
   int lastIndex = str.LastIndexOf("Hello");  // Output: 13
   

8.Contains(string value)*
   - Checks whether a string contains a specified substring and returns a bool.
   csharp
   string str = "Hello, World!";
   bool contains = str.Contains("World");  // Output: true
   

9.Replace(string oldValue, string newValue)
   - Replaces all occurrences of a specified string with another string.
   csharp
   string str = "Hello, World!";
   string newStr = str.Replace("World", "C#");  // Output: "Hello, C#!"
   

10.Trim()
   - Removes all leading and trailing whitespace characters.
   csharp
   string str = "  Hello, World!  ";
   string trimmedStr = str.Trim();  // Output: "Hello, World!"
   
11.TrimStart()
   - Removes all leading (starting) whitespace characters.
   csharp
   string str = "  Hello, World!";
   string trimmedStartStr = str.TrimStart();  // Output: "Hello, World!"
   

12.TrimEnd()*
   - Removes all trailing (ending) whitespace characters.
   csharp
   string str = "Hello, World!  ";
   string trimmedEndStr = str.TrimEnd();  // Output: "Hello, World!"
   
13.Split(char separator)
   - Splits a string into an array of substrings based on a specified separator character.
   csharp
   string str = "Apple, Banana, Cherry";
   string[] fruits = str.Split(',');  // Output: ["Apple", " Banana", " Cherry"]
   

14. Join(string separator, string[] values)
   - Concatenates an array of strings into a single string with a specified separator.
   csharp
   string[] words = { "Apple", "Banana", "Cherry" };
   string joined = string.Join(", ", words);  // Output: "Apple, Banana, Cherry"
   

15.StartsWith(string value)
   - Determines whether a string starts with a specified substring.
   csharp
   string str = "Hello, World!";
   bool startsWithHello = str.StartsWith("Hello");  // Output: true

16.EndsWith(string value)
   - Determines whether a string ends with a specified substring.
   csharp
   string str = "Hello, World!";
   bool endsWithWorld = str.EndsWith("World!");  // Output: true
   

17.IsNullOrEmpty(string value)
   - Checks whether a string is null or an empty string.
   csharp
   string str = "";
   bool isEmpty = string.IsNullOrEmpty(str);  // Output: true
   

18. IsNullOrWhiteSpace(string value)
   - Checks whether a string is null, an empty string, or contains only white-space characters.
   csharp
   string str = "   ";
   bool isWhitespace = string.IsNullOrWhiteSpace(str);  // Output: true
   
19. Format(string format, object[] args)
   - Formats a string by replacing placeholders with the specified arguments.
   csharp
   string formatted = string.Format("My name is {0} and I am {1} years old.", "John", 30);  
   // Output: "My name is John and I am 30 years old."
   

20. ToCharArray()
   - Converts the string to a character array.
   csharp
   string str = "Hello";
   char[] chars = str.ToCharArray();  // Output: ['H', 'e', 'l', 'l', 'o']
   








In C#, arrays have several built-in functions and methods provided by the `Array` class. 
Here's a list of commonly used array functions in C# with explanations and examples in a simple way.

1. Length
   -  Returns the total number of elements in all dimensions of the array.
   - array.Length`
   - Example:
     int[] numbers = { 1, 2, 3, 4, 5 };
     Console.WriteLine(numbers.Length); // Output: 5
     

2. Rank
   -  Returns the number of dimensions in the array.
   - array.Rank`
   - Example:
     
     int[,] multiDim = { { 1, 2 }, { 3, 4 } };
     Console.WriteLine(multiDim.Rank); // Output: 2
     

3.GetLength(int dimension)
   -Returns the number of elements in the specified dimension of the array.
   -array.GetLength(dimension)
   - Example:

     int[,] multiDim = { { 1, 2 }, { 3, 4 } };
     Console.WriteLine(multiDim.GetLength(0)); // Output: 2 (rows)
     Console.WriteLine(multiDim.GetLength(1)); // Output: 2 (columns)
     

4. GetValue(int index)
   -  Gets the value at the specified index in the array.
   - array.GetValue(index)
   - Example:
     
     int[] numbers = { 10, 20, 30 };
     Console.WriteLine(numbers.GetValue(1)); // Output: 20
     

5. SetValue(object value, int index)
   -  Sets a value at the specified index in the array.
   - array.SetValue(value, index)
   - Example:
   
     int[] numbers = { 10, 20, 30 };
     numbers.SetValue(100, 1);
     Console.WriteLine(numbers[1]); // Output: 100

6. Clear
   -  Sets a range of elements in the array to zero or `null`.
   - Array.Clear(array, startIndex, length)`
   - Example:
     int[] numbers = { 1, 2, 3, 4, 5 };
     Array.Clear(numbers, 1, 2);  // Clears 2 elements starting from index 1
     Console.WriteLine(numbers[1]); // Output: 0
     

7.Copy
   -  Copies elements from one array to another.
   - Array.Copy(sourceArray, destinationArray, length)
   - Example:
     
     int[] source = { 1, 2, 3 };
     int[] destination = new int[3];
     Array.Copy(source, destination, 3);
     Console.WriteLine(destination[0]); // Output: 1
     

8. Sort
   -  Sorts the elements of the array in ascending order.
   - Array.Sort(array)
   - Example:
     
     int[] numbers = { 5, 3, 8, 1 };
     Array.Sort(numbers);
     Console.WriteLine(string.Join(", ", numbers)); // Output: 1, 3, 5, 8
     

9. Reverse
   - Reverses the order of the elements in the array.
   -  `Array.Reverse(array)`
   - Example:
     
     int[] numbers = { 1, 2, 3, 4 };
     Array.Reverse(numbers);
     Console.WriteLine(string.Join(", ", numbers)); // Output: 4, 3, 2, 1
     
10.IndexOf
   -  Finds the index of the first occurrence of a specified value in the array.
   - `Array.IndexOf(array, value)`
   - Example:
     
     int[] numbers = { 1, 2, 3, 4, 2 };
     int index = Array.IndexOf(numbers, 2);
     Console.WriteLine(index); // Output: 1
    
11.LastIndexOf
   - Finds the index of the last occurrence of a specified value in the array.
   - Array.LastIndexOf(array, value)`
   - Example:
     
     int[] numbers = { 1, 2, 3, 4, 2 };
     int index = Array.LastIndexOf(numbers, 2);
     Console.WriteLine(index); // Output: 4
    

12.Exists
   -  Checks if at least one element in the array matches a condition.
   - Array.Exists(array, match)`
   - Example:
     
     int[] numbers = { 1, 2, 3, 4 };
     bool exists = Array.Exists(numbers, n => n == 3);
     Console.WriteLine(exists); // Output: True
     
13. Find
   - Returns the first element that matches a condition.
   - Array.Find(array, match)
   - Example:
     
     int[] numbers = { 1, 2, 3, 4 };
     int result = Array.Find(numbers, n => n > 2);
     Console.WriteLine(result); // Output: 3
    

14.FindAll
   -  Returns all elements that match a condition.
   - Array.FindAll(array, match)
   - Example:
     
     int[] numbers = { 1, 2, 3, 4 };
     int[] results = Array.FindAll(numbers, n => n > 2);
     Console.WriteLine(string.Join(", ", results)); // Output: 3, 4
    
15.FindIndex
   -  Returns the index of the first element that matches a condition.
   - Array.FindIndex(array, match)
   - Example:
     
     int[] numbers = { 1, 2, 3, 4 };
     int index = Array.FindIndex(numbers, n => n > 2);
     Console.WriteLine(index); // Output: 2
     

These built-in functions in C# simplify common tasks when working with arrays, such as searching, sorting, and manipulating array elements.


## DICTIONARY FUNCTIONS

1. Add()
   Adds a key-value pair to the dictionary.
   Example:
   Dictionary<int, string> dict = new Dictionary<int, string>();
   dict.Add(1, "One");  // Dictionary: {1: "One"}

2. Clear()
   Removes all key-value pairs from the dictionary.
   Example:
   dict.Clear();  // Dictionary: {}

3. ContainsKey()
   Checks if the dictionary contains a specific key.
   Example:
   bool hasKey = dict.ContainsKey(1);  // false

4. ContainsValue()
   Checks if the dictionary contains a specific value.
   Example:
   bool hasValue = dict.ContainsValue("One");  // false

5. Count
   Returns the number of key-value pairs.
   Example:
   int count = dict.Count;  // 0

6. Remove()
   Removes a key-value pair by key.
   Example:
   dict.Remove(1);  // Dictionary: {}

7. TryGetValue()
   Tries to get the value associated with a key.
   Example:
   dict.TryGetValue(1, out string value);  // value: null

8. Keys
   Returns a collection of keys.
   Example:
   ICollection<int> keys = dict.Keys;  // []

9. Values
   Returns a collection of values.
   Example:
   ICollection<string> values = dict.Values;  // []

10. Item[] (Indexer)
    Accesses a value by key.
    Example:
    dict[1] = "New Value";  // {1: "New Value"}

11. ToList()
    Converts the dictionary to a list of KeyValuePair objects.
    Example:
    List<KeyValuePair<int, string>> list = dict.ToList();

12. GetEnumerator()
    Returns an enumerator to iterate through the dictionary.
    Example:
    var enumerator = dict.GetEnumerator();

13. Contains()
    Checks if a key-value pair exists in the dictionary.
    Example:
    bool exists = dict.Contains(new KeyValuePair<int, string>(1, "One"));  // false

14. Equals()
    Checks if two dictionaries are equal.
    Example:
    bool areEqual = dict.Equals(new Dictionary<int, string>());  // true

15. Union()
    Combines two dictionaries.
    Example:
    var merged = dict.Union(new Dictionary<int, string> { {2, "Two"} });

16. Intersect()
    Gets the common key-value pairs between two dictionaries.
    Example:
    var common = dict.Intersect(new Dictionary<int, string> { {1, "One"} });

17. Any()
    Checks if any key-value pair matches a condition.
    Example:
    bool any = dict.Any(kvp => kvp.Key == 1);  // false

18. Select()
    Projects each element into a new form.
    Example:
    var result = dict.Select(kvp => kvp.Value).ToList();

19. OrderBy()
    Orders the dictionary by key or value.
    Example:
    var ordered = dict.OrderBy(kvp => kvp.Key).ToList();

20. Where()
    Filters the dictionary based on a condition.
    Example:
    var filtered = dict.Where(kvp => kvp.Key > 1).ToList();


## LIST FUNCTIONS

1. Add()
   Adds an object to the end of the list.
   Example:
   List<int> numbers = new List<int>();
   numbers.Add(1);  // List: [1]

2. AddRange()
   Adds elements of a collection to the end of the list.
   Example:
   numbers.AddRange(new int[] {2, 3});  // List: [1, 2, 3]

3. Clear()
   Removes all elements from the list.
   Example:
   numbers.Clear();  // List: []

4. Contains()
   Checks if a specific element exists in the list.
   Example:
   bool hasOne = numbers.Contains(1);  // false

5. Count
   Returns the number of elements in the list.
   Example:
   int count = numbers.Count;  // 0

6. Find()
   Returns the first element that matches the condition.
   Example:
   int found = numbers.Find(x => x > 1);  // 2

7. FindAll()
   Returns all elements that match the condition.
   Example:
   List<int> result = numbers.FindAll(x => x > 1);  // [2, 3]

8. FindIndex()
   Returns the index of the first matching element.
   Example:
   int index = numbers.FindIndex(x => x > 1);  // 1

9. Insert()
   Inserts an element at the specified index.
   Example:
   numbers.Insert(1, 10);  // List: [1, 10, 2, 3]

10. Remove()
    Removes the first occurrence of a specific element.
    Example:
    numbers.Remove(10);  // List: [1, 2, 3]

11. RemoveAt()
    Removes an element at the specified index.
    Example:
    numbers.RemoveAt(1);  // List: [1, 3]

12. Sort()
    Sorts the elements in the list.
    Example:
    numbers.Sort();  // List: [1, 3]

13. Reverse()
    Reverses the order of elements in the list.
    Example:
    numbers.Reverse();  // List: [3, 1]

14. IndexOf()
    Returns the index of the first occurrence of an element.
    Example:
    int index = numbers.IndexOf(1);  // 1

15. LastIndexOf()
    Returns the index of the last occurrence of an element.
    Example:
    int index = numbers.LastIndexOf(1);  // 1

16. ToArray()
    Copies the elements to a new array.
    Example:
    int[] array = numbers.ToArray();  // [3, 1]

17. GetRange()
    Returns a range of elements from the list.
    Example:
    List<int> sublist = numbers.GetRange(0, 2);  // [3, 1]

18. ForEach()
    Performs the specified action on each element.
    Example:
    numbers.ForEach(x => Console.WriteLine(x));  // 3, 1

19. Exists()
    Determines if any element matches a condition.
    Example:
    bool exists = numbers.Exists(x => x == 3);  // true

20. RemoveAll()
    Removes all elements that match a condition.
    Example:
    numbers.RemoveAll(x => x > 1);  // List: [1]



Add vs AddRange

   Both `Add` and `AddRange` are methods used to add elements to a collection like a `List<T>`, but they differ in how they work:

ADD:
-  Adds a single element to the list.
- list.Add(item)
- Example:
   
   List<int> numbers = new List<int>();
   numbers.Add(1);  // Adds a single element to the list
   Console.WriteLine(numbers.Count);  // Output: 1
   
AddRange
- Adds multiple elements (a collection of items) to the list at once.
- list.AddRange(collection)`
- Example:
   
   List<int> numbers = new List<int>();
   numbers.AddRange(new int[] { 1, 2, 3 });  // Adds multiple elements to the list
   Console.WriteLine(numbers.Count);  // Output: 3
  


- Add adds one element at a time, while **AddRange** adds multiple elements at once.
- Add is suitable for adding individual items, while **AddRange** is more efficient for adding a batch of items.



Here's a simple explanation of `Count` and `LongCount` with examples:

Count
- Count` tells you how many items are in a collection (like a list or array).
- Use `Count` when the number of items is small to moderate (less than 2 billion).
- Returns An `int` (whole number).
  
Example

List<int> numbers = new List<int> { 1, 2, 3, 4 };
Console.WriteLine(numbers.Count);  // Output: 4

Here, `numbers.Count` returns `4` because there are four elements in the list.

---

LongCount
- LongCount` is just like `Count`, but it's used when you have a very large number of items (more than 2 billion).
- Use `LongCount` when the collection could potentially have more than 2 billion items.
- returns `long` (larger whole number that can hold more than `Count`).
  
Example:

List<int> numbers = new List<int> { 1, 2, 3, 4 };
Console.WriteLine(numbers.LongCount());  // Output: 4

Here, `numbers.LongCount() also returns `4` because the list has four elements, but it can handle very large collections.

Simple Difference:
--Use `Count when you're working with collections that aren't too large.
--Use LongCount when you're working with very large collections, especially if the number of items could go beyond 2 billion. 

For most everyday uses,Count` is enough unless you're dealing with massive data sets.